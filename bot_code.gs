const token = '************************************';
const webhookUrl = 'https://**************************************';
const myBot = new TelegramApp(token, true);
const type = myBot.Type();
const cache = CacheService.getScriptCache();
const chat_logging = false;

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã.
 * @param {Object} e - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞.
 * @return {Promise<void>}
 */
async function doPost(e) {
	try {
		const update = JSON.parse(e.postData.contents);
		if (update.callback_query) {
			await myBot.answerCallbackQuery({
				callback_query_id: update.callback_query.id,
				text: `–•–æ—Ä–æ—à–æ ${update.callback_query.from.first_name}...`,
				cache_time: 0
			});
		}
		if (chat_logging) {
			myBot.sendMessage({
				chat_id: '132384373',
				text: 'update - \n' + JSON.stringify(update)
			});
		}
		await main(update);
	} catch (e) {
		Logger.log(JSON.stringify(e));
	}
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞.
 * @param {Object} update - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API.
 * @return {Promise<void>}
 */
async function main(update) {
	if (update.callback_query) {
		if (update.callback_query.message) {
			await proceedCallback(update.callback_query);
		}
	}
	if ("message" in update && !update.callback_query) {
		if (!!update.message.entities && update.message.entities.some(item => item.type === "bot_command")) {
			await proceedBotCommand(update);
		} else {
			if (update.message?.animation || update.message?.document || update.message?.audio || update.message?.photo || update.message?.sticker || update.message?.photo || update.message?.voice) {
				await myBot.sendMessage({
					chat_id: update.message.chat.id,
					text: `–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è ${update.message.from.first_name}`
				});
			} else {
				await proceedText(update.message);
			}
		}
	}
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback_query, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ 'ask' –≤ –ø–æ–ª–µ data. –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫—ç—à –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
 * @param {object} callback_query - –û–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.
 * @return {Promise<void>}
 */
async function proceedCallback(callback_query) {
	switch (callback_query.data) {
		case 'ask':
			cache.put(callback_query.message.chat.id + '_' + callback_query.from.id + '_waitforask', 'true', 21600);
			await myBot.sendMessage({
				chat_id: callback_query.message.chat.id,
				text: '–ó–∞–¥–∞–π –≤–æ–ª–Ω—É—é—â–∏–π —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å:'
			});
			break;
		case 'get_next_card':
			await sendRemainCard(
				callback_query.message.chat.id,
				callback_query.from.id
			);
			break;
		default:
			break;
	}
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç chatgpt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
 * @param {object} message - –û–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @return {Promise<void>}
 */
async function proceedText(message) {
	const status = cache.get(message.chat.id + '_' + message.from.id + '_waitforask');
	if (status == 'true') {
		cache.remove(message.chat.id + '_' + message.from.id + '_waitforask');
		await myBot.sendAnimation({
			chat_id: message.chat.id,
			animation: '***********************************************************',
			caption: `–ú–∏–Ω—É—Ç–æ—á–∫—É ${message.from.first_name}, —Å–µ–π—á–∞—Å –≤—Å—ë —É–∑–Ω–∞–µ–º, —É–∂–µ —Ç–∞—Å—É—é –∫–∞—Ä—Ç—ã!`
		});
		const reply_arr = await chatgpt(message.text);
		await myBot.sendMessage({
			chat_id: message.chat.id,
			text: '–ò—Ç–∞–∫, —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å...'
		});
		const photo_one = reply_arr[0].rasklad.card.file_id;
		const caption_one = `<strong>${reply_arr[0].rasklad.card.name}</strong>\n\n${reply_arr[0].reply}`;
		const remains_arr = reply_arr.slice(1);
		cache.put(
			message.chat.id + '_' + message.from.id + '_remains',
			JSON.stringify({
				remains_arr: remains_arr
			}),
			21600
		);
		await myBot.sendPhoto({
			photo: photo_one,
			chat_id: message.chat.id,
			caption: caption_one,
			parse_mode: 'HTML',
			reply_markup: type.inlineKeyboardMarkup({
				inline_keyboard: [
					[{
						text: '–î–∞–ª—å—à–µ üëâ',
						callback_data: `get_next_card`
					}]
				]
			})
		});
	} else {
		await myBot.sendMessage({
			chat_id: message.chat.id,
			text: `–Ø —á—Ç–æ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª –Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞... –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ ${message.from.first_name}! - /new`
		});
	}
}

async function sendRemainCard(chat_id, user_id) {
	const remain_cache = cache.get(chat_id + '_' + user_id + '_remains');
	Logger.log(remain_cache);
	if (remain_cache != null) {
		const remain_json_obj = JSON.parse(remain_cache);
		const arr = remain_json_obj.remains_arr;
		let caption_one = arr[0].reply;
		const photo_one = arr[0].rasklad?.card?.file_id;
		if (photo_one) {
			caption_one = `<strong>${arr[0].rasklad.card.name}</strong>\n\n${arr[0].reply}`;
		}
		const remains_arr = arr.slice(1);
		cache.put(
			chat_id + '_' + user_id + '_remains',
			JSON.stringify({
				remains_arr: remains_arr
			}),
			21600
		);
		if (photo_one) {
			await myBot.sendPhoto({
				photo: photo_one,
				chat_id: chat_id,
				caption: caption_one,
				parse_mode: 'HTML',
				reply_markup: type.inlineKeyboardMarkup({
					inline_keyboard: [
						[{
							text: '–î–∞–ª—å—à–µ üëâ',
							callback_data: `get_next_card`
						}]
					]
				})
			});
		} else {
			cache.remove(chat_id + '_' + user_id + '_remains');
			await myBot.sendPhoto({
				photo: '**********************************************************************',
				parse_mode: 'HTML',
				chat_id: chat_id,
				caption: caption_one
			});
		}
	}
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞. –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /start, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π "–ü–æ–≥–∞–¥–∞—Ç—å". –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /help, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
 * @param {object} update - –û–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
 * @return {void}
 */
async function proceedBotCommand(update) {
	const entities = update.message.entities;
	const message_text = update.message.text.trim();
	for (let i = 0; i < entities.length; i++) {
		const entity = entities[i];
		if (entity.type === 'bot_command') {
			const commandtext = message_text;
			switch (commandtext) {
				case '/start':
					const start_message = getStartMessage(update.message.from.language_code, update.message.from.first_name);
					await myBot.sendPhoto({
						photo: '***********************************************************************',
						chat_id: update.message.chat.id,
						caption: start_message,
						parse_mode: 'HTML',
						reply_markup: type.inlineKeyboardMarkup({
							inline_keyboard: [
								[{
									text: 'üÉè –ü–æ–≥–∞–¥–∞—Ç—å',
									callback_data: `ask`
								}]
							]
						})
					});
					break;
				case '/help':
					await myBot.sendMessage({
						chat_id: update.message.chat.id,
						text: '–ß–∏–ø –∏ –¥–µ–π–ª —Å–ø–µ—à–∞—Ç –Ω–∞ –ø–æ–º–æ—â—å'
					});
					break;
				case '/new':
					cache.remove(update.message.chat.id + '_' + update.message.from.id + '_waitforask');
					await myBot.sendPhoto({
						photo: '******************************************************************************',
						chat_id: update.message.chat.id,
						caption: `–ù—É –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º ${update.message.from.first_name}...`,
						parse_mode: 'HTML',
						reply_markup: type.inlineKeyboardMarkup({
							inline_keyboard: [
								[{
									text: 'üÉè –ü–æ–≥–∞–¥–∞—Ç—å',
									callback_data: `ask`
								}]
							]
						})
					});
					break;
				default:
					await myBot.sendMessage({
						chat_id: update.message.chat.id,
						text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'
					});
					break;
			}
		}
	}
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞.
 *
 * @async
 * @function setTgWebhook
 * @returns {Promise} Promise –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞.
 */
async function setTgWebhook() {
	try {
		var result = await myBot.setWebhook({
			url: webhookUrl,
			max_connections: 1,
			drop_pending_updates: true
		});
		Logger.log(result);
	} catch (e) {
		Logger.log(e);
	}
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ –¥–ª—è Telegram –±–æ—Ç–∞.
 *
 * @async
 * @function getTgWebhookInfo
 * @returns {Promise} Promise –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ.
 */
async function getTgWebhookInfo() {
	var result = await myBot.getWebhookInfo();
	Logger.log(result);
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram –±–æ—Ç–∞.
 *
 * @async
 * @function set_commands
 * @returns {Promise} Promise –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥.
 */
async function set_commands() {
	var result = await myBot.setMyCommands({
		commands: [{
			command: '/start',
			description: '–°—Ç–∞—Ä—Ç'
		},
		{
			command: '/help',
			description: '–ü–æ–º–æ—â—å'
		}
		],
		language_code: 'ru'
	});
	Logger.log(result);
}